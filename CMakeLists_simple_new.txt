cmake_minimum_required(VERSION 3.10)
project(OptimizedFaceService)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_BUILD_TYPE Release)

# Optimize for speed
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -march=native -mtune=native -ffast-math -funroll-loops")

# Find required packages
find_package(OpenCV REQUIRED)
find_package(Threads REQUIRED)
find_package(CURL REQUIRED)

# Include directories
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/crow
    ${OpenCV_INCLUDE_DIRS}
    ${CURL_INCLUDE_DIRS}
    /usr/local/include
    /opt/homebrew/include  # For macOS with Homebrew
)

# Link directories
link_directories(
    /usr/local/lib
    /opt/homebrew/lib  # For macOS with Homebrew
)

# Find or download nlohmann_json
find_package(nlohmann_json QUIET)
if(NOT nlohmann_json_FOUND)
    # Download json.hpp if not found
    message(STATUS "Downloading nlohmann/json...")
    file(DOWNLOAD
        https://github.com/nlohmann/json/releases/download/v3.11.2/json.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/crow/json.hpp
        SHOW_PROGRESS)
    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/crow)
endif()

# BlazeFace library (OpenCV version)
add_library(blazeface_opencv_lib STATIC
    src/blazeface/blazeface_opencv.cpp
)

target_link_libraries(blazeface_opencv_lib
    ${OpenCV_LIBS}
    ${CURL_LIBRARIES}
    ${CMAKE_THREAD_LIBS_INIT}
)

target_compile_options(blazeface_opencv_lib PRIVATE -fPIC)

# Optimized web server executable
add_executable(optimized_server
    optimized_server_opencv.cpp
)

target_link_libraries(optimized_server
    blazeface_opencv_lib
    ${OpenCV_LIBS}
    ${CURL_LIBRARIES}
    ${CMAKE_THREAD_LIBS_INIT}
    pthread
)

# Test directions executable
add_executable(test_directions
    test_directions_opencv.cpp
)

target_link_libraries(test_directions
    blazeface_opencv_lib
    ${OpenCV_LIBS}
    ${CURL_LIBRARIES}
    ${CMAKE_THREAD_LIBS_INIT}
)

# Installation rules
install(TARGETS optimized_server test_directions
    RUNTIME DESTINATION bin
)

install(DIRECTORY models/
    DESTINATION models
    FILES_MATCHING PATTERN "*.xml" PATTERN "*.caffemodel" PATTERN "*.prototxt"
)

# Custom target to download models
add_custom_target(download_models
    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_SOURCE_DIR}/models
    COMMAND ${CMAKE_COMMAND} -E echo "Downloading OpenCV face detection model..."
    COMMAND curl -L -o ${CMAKE_CURRENT_SOURCE_DIR}/models/deploy.prototxt
        https://raw.githubusercontent.com/opencv/opencv/master/samples/dnn/face_detector/deploy.prototxt
    COMMAND curl -L -o ${CMAKE_CURRENT_SOURCE_DIR}/models/res10_300x300_ssd_iter_140000.caffemodel
        https://github.com/opencv/opencv_3rdparty/raw/dnn_samples_face_detector_20170830/res10_300x300_ssd_iter_140000.caffemodel
    COMMAND curl -L -o ${CMAKE_CURRENT_SOURCE_DIR}/models/haarcascade_frontalface_default.xml
        https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalface_default.xml
    COMMAND ${CMAKE_COMMAND} -E echo "Models downloaded successfully"
)

# Print configuration summary
message(STATUS "========================================")
message(STATUS "Optimized Face Service Configuration")
message(STATUS "========================================")
message(STATUS "OpenCV version: ${OpenCV_VERSION}")
message(STATUS "OpenCV libraries: ${OpenCV_LIBS}")
message(STATUS "CURL libraries: ${CURL_LIBRARIES}")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "C++ compiler flags: ${CMAKE_CXX_FLAGS_RELEASE}")
message(STATUS "========================================")
message(STATUS "")
message(STATUS "To download models, run: make download_models")
message(STATUS "")

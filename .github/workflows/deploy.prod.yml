name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag (optional, defaults to commit SHA)'
        required: false
        type: string

env:
  REGISTRY: ${{ secrets.HARBOR_REGISTRY }}
  PROJECT_NAME: gateman-face
  IMAGE_NAME: face-service-prod

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      attestations: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Docker build locally
        run: |
          echo "ðŸ§ª Testing Docker build..."
          docker build -t test-build . --progress=plain
          echo "âœ… Docker build test successful"

      - name: Test Docker container functionality
        if: github.event_name == 'pull_request'
        run: |
          echo "ðŸ§ª Running API tests..."
          docker run -d --name test-container -p 8080:8080 test-build
          sleep 20

          # Test health endpoint
          curl -f -s http://localhost:8080/health > /dev/null || exit 1
          echo "âœ“ Health endpoint is accessible"

          # Test API endpoints
          curl -s -X POST http://localhost:8080/compare-faces \
            -H "Content-Type: application/json" \
            -d '{"image1": "test", "image2": "test"}' > /dev/null || exit 1
          echo "âœ“ Compare-faces endpoint is accessible"

          curl -s -X POST http://localhost:8080/liveness-check \
            -H "Content-Type: application/json" \
            -d '{"image": "test"}' > /dev/null || exit 1
          echo "âœ“ Liveness-check endpoint is accessible"

          curl -s -X POST http://localhost:8080/generate-challenge \
            -H "Content-Type: application/json" \
            -d '{}' > /dev/null || exit 1
          echo "âœ“ Generate-challenge endpoint is accessible"

          # Clean up
          docker stop test-container && docker rm test-container
          echo "âœ… All API tests passed"

      - name: Log in to Harbor Registry
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Extract metadata
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event.inputs.tag != '' }}

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          provenance: true
          sbom: true

      - name: Generate artifact attestation
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true